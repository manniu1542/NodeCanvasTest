using ZHFSM;
//Automatically generated code
[StateMachineController(ControllerName = "TestHFSM")]
public partial class TestHFSM : StateMachineScriptController
{
	public override StateMachine ConstructStateMachine()
	{
		StateMachineHandler.BeginStateMachine(this, "Root")
			.AddService("PlayerMoveInput",ServiceType.Update,0).OnService(on_PlayerMoveInput_service)
			.AddService("CheckHit",ServiceType.Update,0).OnService(on_CheckHit_service)
			.AddStateMachine("normal", true)
				.AddService("NormalLogicUpdate",ServiceType.Update,0).OnService(on_NormalLogicUpdate_service)
				.AddState("n_idle", true).OnExecute(on_n_idle_execute)
				.AddState("n_walk", false).OnExecute(on_n_walk_execute)
				.AddTemporaryState("n_talk").OnExecute(on_n_talk_execute)
					.CanExit(can_n_talk_exit)
				.SwitchHandle("n_idle").ToState("n_walk",false)
					.BoolCondition("IsWalk",true)
				.SwitchHandle("n_walk").ToState("n_idle",false)
					.BoolCondition("IsIdle",true)
				.SwitchHandle("Any").ToState("n_talk",true)
					.TriggerCondition("tgrTalk")
				.FinishHandle()
			.AddTemporaryState("g_hit").OnExecute(on_g_hit_execute)
				.CanExit(can_g_hit_exit)
			.AddStateMachine("battale", false)
				.AddStateMachine("battle_free", true)
					.AddService("BattleFreeUpdate",ServiceType.Update,0).OnService(on_BattleFreeUpdate_service)
					.AddState("free_idle", true).OnExecute(on_free_idle_execute)
					.AddState("free_walk", false).OnExecute(on_free_walk_execute)
					.AddState("free_run", false).OnExecute(on_free_run_execute)
					.AddState("free_roll", false).OnExecute(on_free_roll_execute)
						.CanExit(can_free_roll_exit)
					.SwitchHandle("free_idle").ToState("free_walk",false)
						.BoolCondition("IsIdle",false)
						.BoolCondition("IsWalk",true)
					.SwitchHandle("free_walk").ToState("free_idle",false)
						.BoolCondition("IsIdle",true)
					.SwitchHandle("free_walk").ToState("free_run",false)
						.BoolCondition("IsRun",true)
					.SwitchHandle("free_run").ToState("free_walk",false)
						.BoolCondition("IsIdle",false)
						.BoolCondition("IsWalk",true)
						.BoolCondition("IsRun",false)
					.SwitchHandle("free_run").ToState("free_idle",false)
						.BoolCondition("IsIdle",true)
					.SwitchHandle("free_roll").ToState("free_idle",false)
						.BoolCondition("IsIdle",true)
					.SwitchHandle("free_walk").ToState("free_roll",false)
						.TriggerCondition("tgrRoll")
					.SwitchHandle("free_roll").ToState("free_walk",false)
						.BoolCondition("IsWalk",true)
						.BoolCondition("IsIdle",false)
						.BoolCondition("IsRun",false)
					.SwitchHandle("free_roll").ToState("free_run",false)
						.BoolCondition("IsIdle",false)
						.BoolCondition("IsWalk",true)
						.BoolCondition("IsRun",true)
					.SwitchHandle("free_run").ToState("free_roll",false)
						.TriggerCondition("tgrRoll")
					.FinishHandle()
				.AddStateMachine("battle_target", false)
					.AddState("test", true).OnExecute(on_test_execute)
					.FinishHandle()
				.SwitchHandle("battle_free").ToStateMachine("battle_target")
					.BoolCondition("IsTarget",true)
				.SwitchHandle("battle_target").ToStateMachine("battle_free")
					.BoolCondition("IsTarget",false)
				.FinishHandle()
			.SwitchHandle("Any").ToState("g_hit",true)
				.TriggerCondition("tgrHit")
			.SwitchHandle("normal").ToStateMachine("battale")
				.BoolCondition("IsBattale",true)
			.SwitchHandle("battale").ToStateMachine("normal")
				.BoolCondition("IsBattale",false)
			.FinishHandle()
			.EndHandle();
		return StateMachineHandler.EndStateMachine();
	}
}
